@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation OnConfirmDelete="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>

<div class="row mt-4">
	<div class="col-6">
		<h4 class="card-title text-primary">Cetegory List</h4>
	</div>
	<div class="col-4 offeset-2">
		<a href="category/create" class="btn btn-primary form-control">Add New Category</a>
	</div>
	<div class="col-12">
		@if (Categories.Any())
		{
			<table class="table table-bordered mt-3">
				<thead>
					<tr>
						<th>Name</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (CategoryDTO category in Categories)
					{
						<tr>
							<td>@category.Name</td>
							<td>
								<NavLink href="@($"category/edit/{category.Id}")" class="btn btn-primary">Edit</NavLink>
								<button class="btn btn-danger" @onclick="()=>HandleDelete(category.Id)">Delete</button>
							</td>

						</tr>

					}
				</tbody>
			</table>
		}
		else
		{
			if (IsLoading)
			{
				<div class="text-center">
					<img src="/images/loading.gif" />
				</div>
			}
			else
			{
				<p>No records found</p>
			}
		}
	</div>
</div>

@code {
	private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
	public bool IsLoading { get; set; } = true;
	private int DeleteCategoryId { get; set; } = 0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadCategories();
		}

	}

	private async Task LoadCategories()
	{
		IsLoading = true;
		StateHasChanged();
		Categories = await _categoryRepository.GetAll();
		IsLoading = false;
		StateHasChanged();
	}

	private void HandleDelete(int id)
	{
		DeleteCategoryId = id;
		_jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
	}

	public async Task ConfirmDelete_Click(bool isConfirmed)
	{
		IsLoading = true;
		if (isConfirmed && DeleteCategoryId != 0)
		{

			await Task.Delay(1000);

			_categoryRepository.Delete(DeleteCategoryId);
			_jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
			LoadCategories();
		}
		IsLoading = false;

	}


}