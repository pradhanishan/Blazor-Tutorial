@page "/product/create"
@page "/product/edit/{id:int}"
@inject ICategoryRepository _categoryRepository
@inject IProductRepository _productRepository
@inject NavigationManager _navigationManager
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime

<div classclass="row my-2">
	<h3 class="card-title text-primary mb-3 m-lg-3">@Title Product</h3>
	<div class="col-10">
		@if (IsLoading)
		{
			<div class="text-center">
				<img src="/images/loading.gif" />
			</div>
		}
		else
		{
			<EditForm Model="Product" OnValidSubmit="UpsertProduct">
				<DataAnnotationsValidator />
				@*<ValidationSummary/>*@

				<div class="form-group">
					<label>Name</label>
					<InputText @bind-Value="Product.Name" class="form-control"></InputText>
					<ValidationMessage For="()=>Product.Name" />
				</div>
				<div class="form-group">
					<label>Color</label>
					<InputText @bind-Value="Product.Color" class="form-control"></InputText>
					<ValidationMessage For="()=>Product.Color" />
				</div>
				<div class="form-group">
					<label>Description</label>
					<InputTextArea @bind-Value="Product.Description" class="form-control"></InputTextArea>
					<ValidationMessage For="()=>Product.Description" />
				</div>
				<div class="row pt-3">
					<div class="btn-group col-6">
						<div class="form-check">
							<InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
							<label class="form-check-label">Is Shop Favorites</label>
						</div>
					</div>
					<div class="btn-group col-6">
						<div class="form-check">
							<InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
							<label class="form-check-label">Is Customer Favorites</label>
						</div>
					</div>
				</div>

				<div class="form-group col-6">
					<label>Category</label>
					<InputSelect @bind-Value="Product.CategoryId" class="form-select">
						<option value="0" disabled="disabled" selected>--Select Category--</option>
						@foreach (var cat in Categories)
						{
							<option value="@cat.Id">@cat.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="()=>Product.CategoryId" />
				</div>
				<div class="form-group col-6 mt-3">
					<InputFile OnChange="HandleImageUpload" />
				</div>

				<div class="col-md-2">
					<img src="@Product.ImageUrl" classclass="w-100">
				</div>
				<div class="form-group col-6 mt-3">
					<div class="form-check">
						<button class="btn btn-primary">@Title</button>
				
						<NavLink href="product" class="btn btn-secondary">Back To Index</NavLink>
					</div>
				</div>
			</EditForm>
		}

	</div>

</div>

@code {

	[Parameter]
	public int Id { get; set; }

	private ProductDTO Product { get; set; } = new ProductDTO()
		{
			ImageUrl = "/images/product/default.png"
		};

	private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

	private string Title { get; set; } = "Create";

	public string OldImageUrl { get; set; }

	private async Task UpsertProduct()
	{
		if (Product.Id == 0)
		{
			await _productRepository.Create(Product);
			await _jsRuntime.ToastrSuccess("Product created successfully");
		}
		else
		{
			if (OldImageUrl != Product.ImageUrl)
			{
				_fileUpload.DeleteFile(OldImageUrl);
			}
			await _productRepository.Update(Product);
			await _jsRuntime.ToastrSuccess("Product updated successfully");
		}
		_navigationManager.NavigateTo("/product");
	}

	public bool IsLoading { get; set; } = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender)
		{
			if (Id == 0)
			{
				IsLoading = false;
				Categories = await _categoryRepository.GetAll();
				StateHasChanged();

			}
			else
			{
				Title = "Edit";
				await LoadProduct();

			}
		}

	}

	private async Task LoadProduct()
	{
		IsLoading = true;
		StateHasChanged();

		if (Id != 0)
		{
			Title = "Update";
			Product = await _productRepository.Get(Id);
			OldImageUrl = Product.ImageUrl;
		}
		IsLoading = false;
		StateHasChanged();
	}

	private async Task HandleImageUpload(InputFileChangeEventArgs e)
	{
		IsLoading = true;
		try
		{
			if (e.GetMultipleFiles().Count > 0)
			{
				foreach (var file in e.GetMultipleFiles())
				{
					System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
					if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
					{
						Product.ImageUrl = await _fileUpload.UploadFile(file);
						Product.ImageUrl = Product.ImageUrl.Replace("D:\\Blazor-Tutorial\\Tangy\\TangyWeb_Server\\wwwroot\\images\\product\\", "");
						Product.ImageUrl = "/images/product/" + Product.ImageUrl;
					}
					else
					{
						await _jsRuntime.ToastrError("Please select .jpg/ .jpeg/ .png file only");
						return;
					}
				}
			}
			IsLoading = false;
		}
		catch (Exception)
		{
			await _jsRuntime.ToastrError("Please select .jpg/ .jpeg/ .png file only");
		}
	}

}
