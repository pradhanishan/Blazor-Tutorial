@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation OnConfirmDelete="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>

<div class="row mt-4">
	<div class="col-6">
		<h4 class="card-title text-primary">Product List</h4>
	</div>
	<div class="col-4 offeset-2">
		<a href="product/create" class="btn btn-primary form-control">Add New Product</a>
	</div>
	<div class="col-12">
		@if (Products.Any())
		{
			<table class="table table-bordered mt-3">
				<thead>
					<tr>
						<th>Name</th>
						<th>Shop Favorites</th>
						<th>Customer Favorites</th>
						<th>Category</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (ProductDTO product in Products)
					{
						<tr>
							<td>@product.Name</td>
							<td><input type="checkbox" disabled checked="@(product.ShopFavorites?"checked":null)" /></td>
							<td><input type="checkbox" disabled checked="@(product.CustomerFavorites?"checked":null)" /></td>

							<td>@product.Category.Name</td>
							<td>
								<NavLink href="@($"product/edit/{product.Id}")" class="btn btn-primary">Edit</NavLink>
								<button class="btn btn-danger" @onclick="()=>HandleDelete(product.Id)">Delete</button>
							</td>

						</tr>

					}
				</tbody>
			</table>
		}
		else
		{
			if (IsLoading)
			{
				<div class="text-center">
					<img src="/images/loading.gif" />
				</div>
			}
			else
			{
				<p>No records found</p>
			}
		}
	</div>
</div>

@code {
	private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
	public bool IsLoading { get; set; } = true;
	private int DeleteProductId { get; set; } = 0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadProducts();
		}

	}

	private async Task LoadProducts()
	{
		IsLoading = true;
		StateHasChanged();
		Products = await _productRepository.GetAll();
		IsLoading = false;
		StateHasChanged();
	}

	private void HandleDelete(int id)
	{
		DeleteProductId = id;
		_jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
	}

	public async Task ConfirmDelete_Click(bool isConfirmed)
	{
		IsLoading = true;
		if (isConfirmed && DeleteProductId != 0)
		{

			await Task.Delay(1000);

			await _productRepository.Delete(DeleteProductId);
			await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
			await LoadProducts();
			StateHasChanged();
		}
		IsLoading = false;

	}


}